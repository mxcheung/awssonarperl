<?xml version="1.0" encoding="UTF-8"?>
<rules>
  <rule>
    <key>BadStrings</key>
    <name>Bad Strings</name>
    <configKey>BadStrings</configKey>
    <type>CODE_SMELL</type>
    <tag>badstrings</tag>
    <description>
      <![CDATA[BadStrings: Search for bad strings in source files]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitBitwiseOperators</key>
    <name>Prohibit Bitwise Operators</name>
    <configKey>Bangs::ProhibitBitwiseOperators</configKey>
    <type>BUG</type>
    <tag>bangs</tag>
    <tag>bugs</tag>
    <description>
      <![CDATA[Bangs::ProhibitBitwiseOperators: Bitwise operators are usually accidentally used instead of logical boolean operators.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitCommentedOutCode</key>
    <name>Prohibit Commented Out Code</name>
    <configKey>Bangs::ProhibitCommentedOutCode</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Bangs::ProhibitCommentedOutCode: Commented-out code is usually noise. It should be removed.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitDebuggingModules</key>
    <name>Prohibit Debugging Modules</name>
    <configKey>Bangs::ProhibitDebuggingModules</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Bangs::ProhibitDebuggingModules: Prohibit loading of debugging modules like Data::Dumper]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitFlagComments</key>
    <name>Prohibit Flag Comments</name>
    <configKey>Bangs::ProhibitFlagComments</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Bangs::ProhibitFlagComments: Don't use XXX, TODO, or FIXME.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitNoPlan</key>
    <name>Prohibit No Plan</name>
    <configKey>Bangs::ProhibitNoPlan</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>tests</tag>
    <description>
      <![CDATA[Bangs::ProhibitNoPlan: ]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitNumberedNames</key>
    <name>Prohibit Numbered Names</name>
    <configKey>Bangs::ProhibitNumberedNames</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Bangs::ProhibitNumberedNames: Prohibit variables and subroutines with names that end in digits.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitRefProtoOrProto</key>
    <name>Prohibit Ref Proto Or Proto</name>
    <configKey>Bangs::ProhibitRefProtoOrProto</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>complexity</tag>
    <description>
      <![CDATA[Bangs::ProhibitRefProtoOrProto: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitUselessRegexModifiers</key>
    <name>Prohibit Useless Regex Modifiers</name>
    <configKey>Bangs::ProhibitUselessRegexModifiers</configKey>
    <type>BUG</type>
    <tag>bangs</tag>
    <tag>bugs</tag>
    <description>
      <![CDATA[Bangs::ProhibitUselessRegexModifiers: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Bangs::ProhibitVagueNames</key>
    <name>Prohibit Vague Names</name>
    <configKey>Bangs::ProhibitVagueNames</configKey>
    <type>CODE_SMELL</type>
    <tag>bangs</tag>
    <tag>readability</tag>
    <description>
      <![CDATA[Bangs::ProhibitVagueNames: Don't use generic variable and subroutine names.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::GrepWithSimpleValue</key>
    <name>Grep With Simple Value</name>
    <configKey>BuiltinFunctions::GrepWithSimpleValue</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[BuiltinFunctions::GrepWithSimpleValue: Warn grep with simple value]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitBooleanGrep</key>
    <name>Prohibit Boolean Grep</name>
    <configKey>BuiltinFunctions::ProhibitBooleanGrep</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitBooleanGrep: Use `List::MoreUtils::any' instead of `grep' in boolean context.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitComplexMappings</key>
    <name>Prohibit Complex Mappings</name>
    <configKey>BuiltinFunctions::ProhibitComplexMappings</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitComplexMappings: Map blocks should have a single statement.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitLvalueSubstr</key>
    <name>Prohibit Lvalue Substr</name>
    <configKey>BuiltinFunctions::ProhibitLvalueSubstr</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitLvalueSubstr: Use 4-argument `substr' instead of writing `substr($foo, 2, 6) = $bar'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitReverseSortBlock</key>
    <name>Prohibit Reverse Sort Block</name>
    <configKey>BuiltinFunctions::ProhibitReverseSortBlock</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitReverseSortBlock: Forbid $b before $a in sort blocks.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitShiftRef</key>
    <name>Prohibit Shift Ref</name>
    <configKey>BuiltinFunctions::ProhibitShiftRef</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>tests</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitShiftRef: Prohibit `\shift' in code]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitSleepViaSelect</key>
    <name>Prohibit Sleep Via Select</name>
    <configKey>BuiltinFunctions::ProhibitSleepViaSelect</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitSleepViaSelect: Use Time::HiRes instead of something like `select(undef, undef, undef, .05)'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitStringyEval</key>
    <name>Prohibit Stringy Eval</name>
    <configKey>BuiltinFunctions::ProhibitStringyEval</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitStringyEval: Write `eval { my $foo; bar($foo) }' instead of `eval "my $foo; bar($foo);"'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitStringySplit</key>
    <name>Prohibit Stringy Split</name>
    <configKey>BuiltinFunctions::ProhibitStringySplit</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitStringySplit: Write `split /-/, $string' instead of `split '-', $string'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitUniversalCan</key>
    <name>Prohibit Universal Can</name>
    <configKey>BuiltinFunctions::ProhibitUniversalCan</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitUniversalCan: Write `eval { $foo->can($name) }' instead of `UNIVERSAL::can($foo, $name)'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitUniversalIsa</key>
    <name>Prohibit Universal Isa</name>
    <configKey>BuiltinFunctions::ProhibitUniversalIsa</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitUniversalIsa: Write `eval { $foo->isa($pkg) }' instead of `UNIVERSAL::isa($foo, $pkg)'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitUselessTopic</key>
    <name>Prohibit Useless Topic</name>
    <configKey>BuiltinFunctions::ProhibitUselessTopic</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitUselessTopic: Don't pass $_ to built-in functions that assume it, or to most filetest operators.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitVoidGrep</key>
    <name>Prohibit Void Grep</name>
    <configKey>BuiltinFunctions::ProhibitVoidGrep</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitVoidGrep: Don't use `grep' in void contexts.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::ProhibitVoidMap</key>
    <name>Prohibit Void Map</name>
    <configKey>BuiltinFunctions::ProhibitVoidMap</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[BuiltinFunctions::ProhibitVoidMap: Don't use `map' in void contexts.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::RequireBlockGrep</key>
    <name>Require Block Grep</name>
    <configKey>BuiltinFunctions::RequireBlockGrep</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::RequireBlockGrep: Write `grep { /$pattern/ } @list' instead of `grep /$pattern/, @list'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::RequireBlockMap</key>
    <name>Require Block Map</name>
    <configKey>BuiltinFunctions::RequireBlockMap</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::RequireBlockMap: Write `map { /$pattern/ } @list' instead of `map /$pattern/, @list'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::RequireGlobFunction</key>
    <name>Require Glob Function</name>
    <configKey>BuiltinFunctions::RequireGlobFunction</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::RequireGlobFunction: Use `glob q{*}' instead of <*>.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>BuiltinFunctions::RequireSimpleSortBlock</key>
    <name>Require Simple Sort Block</name>
    <configKey>BuiltinFunctions::RequireSimpleSortBlock</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[BuiltinFunctions::RequireSimpleSortBlock: Sort blocks should have a single statement.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ClassHierarchies::ProhibitAutoloading</key>
    <name>Prohibit Autoloading</name>
    <configKey>ClassHierarchies::ProhibitAutoloading</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ClassHierarchies::ProhibitAutoloading: AUTOLOAD methods should be avoided.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ClassHierarchies::ProhibitExplicitISA</key>
    <name>Prohibit Explicit ISA</name>
    <configKey>ClassHierarchies::ProhibitExplicitISA</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ClassHierarchies::ProhibitExplicitISA: Employ `use base' instead of `@ISA'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ClassHierarchies::ProhibitOneArgBless</key>
    <name>Prohibit One Arg Bless</name>
    <configKey>ClassHierarchies::ProhibitOneArgBless</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ClassHierarchies::ProhibitOneArgBless: Write `bless {}, $class;' instead of just `bless {};'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitFatCommaNewline</key>
    <name>Prohibit Fat Comma Newline</name>
    <configKey>CodeLayout::ProhibitFatCommaNewline</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitFatCommaNewline: keep a fat comma on the same line as its quoted word]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitHardTabs</key>
    <name>Prohibit Hard Tabs</name>
    <configKey>CodeLayout::ProhibitHardTabs</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitHardTabs: Use spaces instead of tabs.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitHashBarewords</key>
    <name>Prohibit Hash Barewords</name>
    <configKey>CodeLayout::ProhibitHashBarewords</configKey>
    <type>CODE_SMELL</type>
    <tag>itch</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitHashBarewords: ]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitIfIfSameLine</key>
    <name>Prohibit If If Same Line</name>
    <configKey>CodeLayout::ProhibitIfIfSameLine</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitIfIfSameLine: don't put if after if on same line]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitParensWithBuiltins</key>
    <name>Prohibit Parens With Builtins</name>
    <configKey>CodeLayout::ProhibitParensWithBuiltins</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitParensWithBuiltins: Write `open $handle, $path' instead of `open($handle, $path)'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitQuotedWordLists</key>
    <name>Prohibit Quoted Word Lists</name>
    <configKey>CodeLayout::ProhibitQuotedWordLists</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitQuotedWordLists: Write `qw(foo bar baz)' instead of `('foo', 'bar', 'baz')'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::ProhibitTrailingWhitespace</key>
    <name>Prohibit Trailing Whitespace</name>
    <configKey>CodeLayout::ProhibitTrailingWhitespace</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[CodeLayout::ProhibitTrailingWhitespace: Don't use whitespace at the end of lines.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireASCII</key>
    <name>Require ASCII</name>
    <configKey>CodeLayout::RequireASCII</configKey>
    <type>CODE_SMELL</type>
    <tag>more</tag>
    <tag>notrecommended</tag>
    <description>
      <![CDATA[CodeLayout::RequireASCII: Disallow high-bit characters.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireConsistentNewlines</key>
    <name>Require Consistent Newlines</name>
    <configKey>CodeLayout::RequireConsistentNewlines</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[CodeLayout::RequireConsistentNewlines: Use the same newline through the source.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireFinalSemicolon</key>
    <name>Require Final Semicolon</name>
    <configKey>CodeLayout::RequireFinalSemicolon</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[CodeLayout::RequireFinalSemicolon: require a semicolon at the end of code blocks]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireTidyCode</key>
    <name>Require Tidy Code</name>
    <configKey>CodeLayout::RequireTidyCode</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[CodeLayout::RequireTidyCode: Must run code through perltidy.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireTrailingCommaAtNewline</key>
    <name>Require Trailing Comma At Newline</name>
    <configKey>CodeLayout::RequireTrailingCommaAtNewline</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[CodeLayout::RequireTrailingCommaAtNewline: comma at end of list at newline]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireTrailingCommas</key>
    <name>Require Trailing Commas</name>
    <configKey>CodeLayout::RequireTrailingCommas</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[CodeLayout::RequireTrailingCommas: Put a comma at the end of every multi-line list declaration, including the last one.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>CodeLayout::RequireUseUTF8</key>
    <name>Require Use UTF8</name>
    <configKey>CodeLayout::RequireUseUTF8</configKey>
    <type>CODE_SMELL</type>
    <tag>swift</tag>
    <tag>unicode</tag>
    <description>
      <![CDATA[CodeLayout::RequireUseUTF8: Require that all modules have a `use utf8;' statement.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>CognitiveComplexity::ProhibitExcessCognitiveComplexity</key>
    <name>Prohibit Excess Cognitive Complexity</name>
    <configKey>CognitiveComplexity::ProhibitExcessCognitiveComplexity</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[CognitiveComplexity::ProhibitExcessCognitiveComplexity: Avoid code that is nested, and thus difficult to grasp.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Compatibility::ConstantLeadingUnderscore</key>
    <name>Constant Leading Underscore</name>
    <configKey>Compatibility::ConstantLeadingUnderscore</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Compatibility::ConstantLeadingUnderscore: new enough "constant" module for leading underscores]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Compatibility::ConstantPragmaHash</key>
    <name>Constant Pragma Hash</name>
    <configKey>Compatibility::ConstantPragmaHash</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Compatibility::ConstantPragmaHash: new enough "constant" module for multiple constants]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Compatibility::Gtk2Constants</key>
    <name>Gtk2Constants</name>
    <configKey>Compatibility::Gtk2Constants</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Compatibility::Gtk2Constants: new enough Gtk2 version for its constants]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Compatibility::PodMinimumVersion</key>
    <name>Pod Minimum Version</name>
    <configKey>Compatibility::PodMinimumVersion</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Compatibility::PodMinimumVersion: check Perl version declared against POD features used]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Compatibility::ProhibitThreeArgumentOpen</key>
    <name>Prohibit Three Argument Open</name>
    <configKey>Compatibility::ProhibitThreeArgumentOpen</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <description>
      <![CDATA[Compatibility::ProhibitThreeArgumentOpen: Don't allow three-argument open unless the code uses a version of perl that supports it.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Compatibility::ProhibitUnixDevNull</key>
    <name>Prohibit Unix Dev Null</name>
    <configKey>Compatibility::ProhibitUnixDevNull</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Compatibility::ProhibitUnixDevNull: don't use explicit /dev/null]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>CompileTime</key>
    <name>Compile Time</name>
    <configKey>CompileTime</configKey>
    <type>CODE_SMELL</type>
    <tag>more</tag>
    <description>
      <![CDATA[CompileTime: Provide Perl::Critic support for hunting down compile-time side effects]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitCStyleForLoops</key>
    <name>Prohibit CStyle For Loops</name>
    <configKey>ControlStructures::ProhibitCStyleForLoops</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitCStyleForLoops: Write `for(0..20)' instead of `for($i=0; $i<=20; $i++)'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitCascadingIfElse</key>
    <name>Prohibit Cascading If Else</name>
    <configKey>ControlStructures::ProhibitCascadingIfElse</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitCascadingIfElse: Don't write long "if-elsif-elsif-elsif-elsif...else" chains.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitDeepNests</key>
    <name>Prohibit Deep Nests</name>
    <configKey>ControlStructures::ProhibitDeepNests</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitDeepNests: Don't write deeply nested loops and conditionals.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitLabelsWithSpecialBlockNames</key>
    <name>Prohibit Labels With Special Block Names</name>
    <configKey>ControlStructures::ProhibitLabelsWithSpecialBlockNames</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitLabelsWithSpecialBlockNames: Don't use labels that are the same as the special block names.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitMutatingListFunctions</key>
    <name>Prohibit Mutating List Functions</name>
    <configKey>ControlStructures::ProhibitMutatingListFunctions</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitMutatingListFunctions: Don't modify `$_' in list functions.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions</key>
    <name>Prohibit Negative Expressions In Unless And Until Conditions</name>
    <configKey>ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitNegativeExpressionsInUnlessAndUntilConditions: Don't use operators like `not', `!~', and `le' within `until' and `unless'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitPostfixControls</key>
    <name>Prohibit Postfix Controls</name>
    <configKey>ControlStructures::ProhibitPostfixControls</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitPostfixControls: Write `if($condition){ do_something() }' instead of `do_something() if $condition'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitSwitchStatements</key>
    <name>Prohibit Switch Statements</name>
    <configKey>ControlStructures::ProhibitSwitchStatements</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitSwitchStatements: avoid using switch statement keywords which might imply implicit smartmatching]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitUnlessBlocks</key>
    <name>Prohibit Unless Blocks</name>
    <configKey>ControlStructures::ProhibitUnlessBlocks</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitUnlessBlocks: Write `if(! $condition)' instead of `unless($condition)'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitUnreachableCode</key>
    <name>Prohibit Unreachable Code</name>
    <configKey>ControlStructures::ProhibitUnreachableCode</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitUnreachableCode: Don't write code after an unconditional `die, exit, or next'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitUntilBlocks</key>
    <name>Prohibit Until Blocks</name>
    <configKey>ControlStructures::ProhibitUntilBlocks</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitUntilBlocks: Write `while(! $condition)' instead of `until($condition)'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ControlStructures::ProhibitYadaOperator</key>
    <name>Prohibit Yada Operator</name>
    <configKey>ControlStructures::ProhibitYadaOperator</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ControlStructures::ProhibitYadaOperator: Never use `...' in production code.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitAdjacentLinks</key>
    <name>Prohibit Adjacent Links</name>
    <configKey>Documentation::ProhibitAdjacentLinks</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitAdjacentLinks: consecutive L<> links]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitBadAproposMarkup</key>
    <name>Prohibit Bad Apropos Markup</name>
    <configKey>Documentation::ProhibitBadAproposMarkup</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitBadAproposMarkup: don't use C<> markup in a NAME section]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitDuplicateHeadings</key>
    <name>Prohibit Duplicate Headings</name>
    <configKey>Documentation::ProhibitDuplicateHeadings</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitDuplicateHeadings: don't duplicate =head names]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitDuplicateSeeAlso</key>
    <name>Prohibit Duplicate See Also</name>
    <configKey>Documentation::ProhibitDuplicateSeeAlso</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitDuplicateSeeAlso: don't duplicate L<> links in SEE ALSO]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitLinkToSelf</key>
    <name>Prohibit Link To Self</name>
    <configKey>Documentation::ProhibitLinkToSelf</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitLinkToSelf: don't L<> link to own POD]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitParagraphEndComma</key>
    <name>Prohibit Paragraph End Comma</name>
    <configKey>Documentation::ProhibitParagraphEndComma</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitParagraphEndComma: avoid comma at end of section]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitParagraphTwoDots</key>
    <name>Prohibit Paragraph Two Dots</name>
    <configKey>Documentation::ProhibitParagraphTwoDots</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitParagraphTwoDots: don't end a paragraph with two dots]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitUnbalancedParens</key>
    <name>Prohibit Unbalanced Parens</name>
    <configKey>Documentation::ProhibitUnbalancedParens</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitUnbalancedParens: don't leave an open bracket or paren]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::ProhibitVerbatimMarkup</key>
    <name>Prohibit Verbatim Markup</name>
    <configKey>Documentation::ProhibitVerbatimMarkup</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::ProhibitVerbatimMarkup: unexpanded C<> etc markup in POD verbatim paras]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequireEndBeforeLastPod</key>
    <name>Require End Before Last Pod</name>
    <configKey>Documentation::RequireEndBeforeLastPod</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::RequireEndBeforeLastPod: require __END__ before POD at end of file]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequireFilenameMarkup</key>
    <name>Require Filename Markup</name>
    <configKey>Documentation::RequireFilenameMarkup</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::RequireFilenameMarkup: markup /foo filenames]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequireFinalCut</key>
    <name>Require Final Cut</name>
    <configKey>Documentation::RequireFinalCut</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::RequireFinalCut: end POD with =cut directive]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::RequireLinkedURLs</key>
    <name>Require Linked URLs</name>
    <configKey>Documentation::RequireLinkedURLs</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Documentation::RequireLinkedURLs: use L<> markup on URLs in POD]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequirePODUseEncodingUTF8</key>
    <name>Require PODUse Encoding UTF8</name>
    <configKey>Documentation::RequirePODUseEncodingUTF8</configKey>
    <type>CODE_SMELL</type>
    <tag>swift</tag>
    <tag>unicode</tag>
    <description>
      <![CDATA[Documentation::RequirePODUseEncodingUTF8: Require that all modules that contain POD have a `=encoding utf8' declaration.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequirePackageMatchesPodName</key>
    <name>Require Package Matches Pod Name</name>
    <configKey>Documentation::RequirePackageMatchesPodName</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <description>
      <![CDATA[Documentation::RequirePackageMatchesPodName: The `=head1 NAME' section should match the package.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::RequirePodAtEnd</key>
    <name>Require Pod At End</name>
    <configKey>Documentation::RequirePodAtEnd</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Documentation::RequirePodAtEnd: All POD should be after `__END__'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Documentation::RequirePodLinksIncludeText</key>
    <name>Require Pod Links Include Text</name>
    <configKey>Documentation::RequirePodLinksIncludeText</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Documentation::RequirePodLinksIncludeText: Provide text to display with your pod links.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Documentation::RequirePodSections</key>
    <name>Require Pod Sections</name>
    <configKey>Documentation::RequirePodSections</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Documentation::RequirePodSections: Organize your POD into the customary sections.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Editor::RequireEmacsFileVariables</key>
    <name>Require Emacs File Variables</name>
    <configKey>Editor::RequireEmacsFileVariables</configKey>
    <type>CODE_SMELL</type>
    <tag>editor</tag>
    <tag>more</tag>
    <tag>readability</tag>
    <description>
      <![CDATA[Editor::RequireEmacsFileVariables: Per-file editor settings.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ErrorHandling::RequireCarping</key>
    <name>Require Carping</name>
    <configKey>ErrorHandling::RequireCarping</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ErrorHandling::RequireCarping: Use functions from Carp instead of `warn' or `die'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ErrorHandling::RequireCheckingReturnValueOfEval</key>
    <name>Require Checking Return Value Of Eval</name>
    <configKey>ErrorHandling::RequireCheckingReturnValueOfEval</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[ErrorHandling::RequireCheckingReturnValueOfEval: You can't depend upon the value of `$@'/`$EVAL_ERROR' to tell whether an `eval' failed.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ErrorHandling::RequireUseOfExceptions</key>
    <name>Require Use Of Exceptions</name>
    <configKey>ErrorHandling::RequireUseOfExceptions</configKey>
    <type>CODE_SMELL</type>
    <tag>maintenance</tag>
    <tag>more</tag>
    <description>
      <![CDATA[ErrorHandling::RequireUseOfExceptions: Use exceptions instead of `die', `croak', or `confess'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::AmpersandSubCalls</key>
    <name>Ampersand Sub Calls</name>
    <configKey>Freenode::AmpersandSubCalls</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::AmpersandSubCalls: Don't use & to call subroutines]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::ArrayAssignAref</key>
    <name>Array Assign Aref</name>
    <configKey>Freenode::ArrayAssignAref</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::ArrayAssignAref: Don't assign an anonymous arrayref to an array]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Freenode::BarewordFilehandles</key>
    <name>Bareword Filehandles</name>
    <configKey>Freenode::BarewordFilehandles</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::BarewordFilehandles: Don't use bareword filehandles other than built-ins]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::ConditionalDeclarations</key>
    <name>Conditional Declarations</name>
    <configKey>Freenode::ConditionalDeclarations</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::ConditionalDeclarations: Don't declare variables conditionally]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::ConditionalImplicitReturn</key>
    <name>Conditional Implicit Return</name>
    <configKey>Freenode::ConditionalImplicitReturn</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::ConditionalImplicitReturn: Don't end a subroutine with a conditional block]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Freenode::DeprecatedFeatures</key>
    <name>Deprecated Features</name>
    <configKey>Freenode::DeprecatedFeatures</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::DeprecatedFeatures: Avoid features that have been deprecated or removed from Perl]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::DiscouragedModules</key>
    <name>Discouraged Modules</name>
    <configKey>Freenode::DiscouragedModules</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::DiscouragedModules: Various modules discouraged from use]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::DollarAB</key>
    <name>Dollar AB</name>
    <configKey>Freenode::DollarAB</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::DollarAB: Don't use $a or $b as variable names outside sort]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::Each</key>
    <name>Each</name>
    <configKey>Freenode::Each</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::Each: Don't use each to iterate through a hash]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Freenode::EmptyReturn</key>
    <name>Empty Return</name>
    <configKey>Freenode::EmptyReturn</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::EmptyReturn: Don't use return with no arguments]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Freenode::IndirectObjectNotation</key>
    <name>Indirect Object Notation</name>
    <configKey>Freenode::IndirectObjectNotation</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::IndirectObjectNotation: Don't call methods indirectly]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Freenode::LexicalForeachIterator</key>
    <name>Lexical Foreach Iterator</name>
    <configKey>Freenode::LexicalForeachIterator</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::LexicalForeachIterator: Don't use undeclared foreach loop iterators]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::LoopOnHash</key>
    <name>Loop On Hash</name>
    <configKey>Freenode::LoopOnHash</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::LoopOnHash: Don't loop over hashes]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::ModPerl</key>
    <name>Mod Perl</name>
    <configKey>Freenode::ModPerl</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::ModPerl: Don't use mod_perl to write web applications]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::OpenArgs</key>
    <name>Open Args</name>
    <configKey>Freenode::OpenArgs</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::OpenArgs: Always use the three-argument form of open]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Freenode::OverloadOptions</key>
    <name>Overload Options</name>
    <configKey>Freenode::OverloadOptions</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::OverloadOptions: Don't use overload without specifying a bool overload and enabling fallback]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::POSIXImports</key>
    <name>POSIXImports</name>
    <configKey>Freenode::POSIXImports</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::POSIXImports: Don't use POSIX without specifying an import list]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Freenode::PackageMatchesFilename</key>
    <name>Package Matches Filename</name>
    <configKey>Freenode::PackageMatchesFilename</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::PackageMatchesFilename: Module files should declare a package matching the filename]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::PreferredAlternatives</key>
    <name>Preferred Alternatives</name>
    <configKey>Freenode::PreferredAlternatives</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::PreferredAlternatives: Various modules with preferred alternatives]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Freenode::Prototypes</key>
    <name>Prototypes</name>
    <configKey>Freenode::Prototypes</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::Prototypes: Don't use function prototypes]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Freenode::StrictWarnings</key>
    <name>Strict Warnings</name>
    <configKey>Freenode::StrictWarnings</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::StrictWarnings: Always use strict and warnings, or a module that imports these]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Freenode::Threads</key>
    <name>Threads</name>
    <configKey>Freenode::Threads</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::Threads: Interpreter-based threads are officially discouraged]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Freenode::Wantarray</key>
    <name>Wantarray</name>
    <configKey>Freenode::Wantarray</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::Wantarray: Don't write context-sensitive functions using wantarray]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Freenode::WarningsSwitch</key>
    <name>Warnings Switch</name>
    <configKey>Freenode::WarningsSwitch</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::WarningsSwitch: Scripts should not use the -w switch on the shebang line]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Freenode::WhileDiamondDefaultAssignment</key>
    <name>While Diamond Default Assignment</name>
    <configKey>Freenode::WhileDiamondDefaultAssignment</configKey>
    <type>CODE_SMELL</type>
    <tag>freenode</tag>
    <description>
      <![CDATA[Freenode::WhileDiamondDefaultAssignment: Don't use while with implicit assignment to $_]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>HTTPCookies</key>
    <name>HTTPCookies</name>
    <configKey>HTTPCookies</configKey>
    <type>CODE_SMELL</type>
    <tag>http</tag>
    <tag>lwp</tag>
    <description>
      <![CDATA[HTTPCookies: Avoid using HTTP::Cookies]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitBacktickOperators</key>
    <name>Prohibit Backtick Operators</name>
    <configKey>InputOutput::ProhibitBacktickOperators</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[InputOutput::ProhibitBacktickOperators: Discourage stuff like `@files = `ls $directory`'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitBarewordFileHandles</key>
    <name>Prohibit Bareword File Handles</name>
    <configKey>InputOutput::ProhibitBarewordFileHandles</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::ProhibitBarewordFileHandles: Write `open my $fh, q{<}, $filename;' instead of `open FH, q{<}, $filename;'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitExplicitStdin</key>
    <name>Prohibit Explicit Stdin</name>
    <configKey>InputOutput::ProhibitExplicitStdin</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::ProhibitExplicitStdin: Use "<>" or "<ARGV>" or a prompting module instead of "<STDIN>".]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitInteractiveTest</key>
    <name>Prohibit Interactive Test</name>
    <configKey>InputOutput::ProhibitInteractiveTest</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::ProhibitInteractiveTest: Use prompt() instead of -t.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitJoinedReadline</key>
    <name>Prohibit Joined Readline</name>
    <configKey>InputOutput::ProhibitJoinedReadline</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[InputOutput::ProhibitJoinedReadline: Use `local $/ = undef' or Path::Tiny instead of joined readline.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitOneArgSelect</key>
    <name>Prohibit One Arg Select</name>
    <configKey>InputOutput::ProhibitOneArgSelect</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::ProhibitOneArgSelect: Never write `select($fh)'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitReadlineInForLoop</key>
    <name>Prohibit Readline In For Loop</name>
    <configKey>InputOutput::ProhibitReadlineInForLoop</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::ProhibitReadlineInForLoop: Write `while( $line = <> ){...}' instead of `for(<>){...}'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>InputOutput::ProhibitTwoArgOpen</key>
    <name>Prohibit Two Arg Open</name>
    <configKey>InputOutput::ProhibitTwoArgOpen</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>security</tag>
    <description>
      <![CDATA[InputOutput::ProhibitTwoArgOpen: Write `open $fh, q{<}, $filename;' instead of `open $fh, "<$filename";'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireBracedFileHandleWithPrint</key>
    <name>Require Braced File Handle With Print</name>
    <configKey>InputOutput::RequireBracedFileHandleWithPrint</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::RequireBracedFileHandleWithPrint: Write `print {$FH} $foo, $bar;' instead of `print $FH $foo, $bar;'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireBriefOpen</key>
    <name>Require Brief Open</name>
    <configKey>InputOutput::RequireBriefOpen</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[InputOutput::RequireBriefOpen: Close filehandles as soon as possible after opening them.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireCheckedClose</key>
    <name>Require Checked Close</name>
    <configKey>InputOutput::RequireCheckedClose</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[InputOutput::RequireCheckedClose: Write `my $error = close $fh;' instead of `close $fh;'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireCheckedOpen</key>
    <name>Require Checked Open</name>
    <configKey>InputOutput::RequireCheckedOpen</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[InputOutput::RequireCheckedOpen: Write `my $error = open $fh, $mode, $filename;' instead of `open $fh, $mode, $filename;'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireCheckedSyscalls</key>
    <name>Require Checked Syscalls</name>
    <configKey>InputOutput::RequireCheckedSyscalls</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[InputOutput::RequireCheckedSyscalls: Return value of flagged function ignored.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>InputOutput::RequireEncodingWithUTF8Layer</key>
    <name>Require Encoding With UTF8Layer</name>
    <configKey>InputOutput::RequireEncodingWithUTF8Layer</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>security</tag>
    <description>
      <![CDATA[InputOutput::RequireEncodingWithUTF8Layer: Write `open $fh, q{<:encoding(UTF-8)}, $filename;' instead of `open $fh, q{<:utf8}, $filename;'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Lax::ProhibitComplexMappings::LinesNotStatements</key>
    <name>Lines Not Statements</name>
    <configKey>Lax::ProhibitComplexMappings::LinesNotStatements</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>lax</tag>
    <description>
      <![CDATA[Lax::ProhibitComplexMappings::LinesNotStatements: prohibit multiline maps, not multistatement maps]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Lax::ProhibitEmptyQuotes::ExceptAsFallback</key>
    <name>Except As Fallback</name>
    <configKey>Lax::ProhibitEmptyQuotes::ExceptAsFallback</configKey>
    <type>CODE_SMELL</type>
    <tag>lax</tag>
    <description>
      <![CDATA[Lax::ProhibitEmptyQuotes::ExceptAsFallback: empty quotes are okay as the fallback on the rhs of ||]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Lax::ProhibitLeadingZeros::ExceptChmod</key>
    <name>Except Chmod</name>
    <configKey>Lax::ProhibitLeadingZeros::ExceptChmod</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Lax::ProhibitLeadingZeros::ExceptChmod: leading zeroes are okay as the first arg to chmod]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Lax::ProhibitStringyEval::ExceptForRequire</key>
    <name>Except For Require</name>
    <configKey>Lax::ProhibitStringyEval::ExceptForRequire</configKey>
    <type>CODE_SMELL</type>
    <tag>danger</tag>
    <description>
      <![CDATA[Lax::ProhibitStringyEval::ExceptForRequire: stringy eval is bad, but it's okay just to "require"]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Lax::RequireConstantOnLeftSideOfEquality::ExceptEq</key>
    <name>Except Eq</name>
    <configKey>Lax::RequireConstantOnLeftSideOfEquality::ExceptEq</configKey>
    <type>CODE_SMELL</type>
    <tag>more</tag>
    <description>
      <![CDATA[Lax::RequireConstantOnLeftSideOfEquality::ExceptEq: constant value on the right side is ok with 'eq' NAME Perl::Critic::Policy::Lax::RequireConstantOnLeftSideOfEquality::ExceptEq - constant value on the right side is ok with 'eq']]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Lax::RequireEndWithTrueConst</key>
    <name>Require End With True Const</name>
    <configKey>Lax::RequireEndWithTrueConst</configKey>
    <type>CODE_SMELL</type>
    <tag>lax</tag>
    <description>
      <![CDATA[Lax::RequireEndWithTrueConst: ending your package with a simple, fun true value is okay]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Lax::RequireExplicitPackage::ExceptForPragmata</key>
    <name>Except For Pragmata</name>
    <configKey>Lax::RequireExplicitPackage::ExceptForPragmata</configKey>
    <type>CODE_SMELL</type>
    <tag>risky</tag>
    <description>
      <![CDATA[Lax::RequireExplicitPackage::ExceptForPragmata: you can put strict and warnings before "package"]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Miscellanea::ProhibitFormats</key>
    <name>Prohibit Formats</name>
    <configKey>Miscellanea::ProhibitFormats</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Miscellanea::ProhibitFormats: Do not use `format'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::ProhibitTies</key>
    <name>Prohibit Ties</name>
    <configKey>Miscellanea::ProhibitTies</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Miscellanea::ProhibitTies: Do not use `tie'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::ProhibitUnrestrictedNoCritic</key>
    <name>Prohibit Unrestricted No Critic</name>
    <configKey>Miscellanea::ProhibitUnrestrictedNoCritic</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Miscellanea::ProhibitUnrestrictedNoCritic: Forbid a bare `## no critic']]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::ProhibitUselessNoCritic</key>
    <name>Prohibit Useless No Critic</name>
    <configKey>Miscellanea::ProhibitUselessNoCritic</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Miscellanea::ProhibitUselessNoCritic: Remove ineffective "## no critic" annotations.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::RequireRcsKeywords</key>
    <name>Require Rcs Keywords</name>
    <configKey>Miscellanea::RequireRcsKeywords</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>deprecated</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Miscellanea::RequireRcsKeywords: Put source-control keywords in every file.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::TextDomainPlaceholders</key>
    <name>Text Domain Placeholders</name>
    <configKey>Miscellanea::TextDomainPlaceholders</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Miscellanea::TextDomainPlaceholders: check placeholder names in Locale::TextDomain calls]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Miscellanea::TextDomainUnused</key>
    <name>Text Domain Unused</name>
    <configKey>Miscellanea::TextDomainUnused</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Miscellanea::TextDomainUnused: check for Locale::TextDomain imported but unused]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Modules::PerlMinimumVersion</key>
    <name>Perl Minimum Version</name>
    <configKey>Modules::PerlMinimumVersion</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <tag>more</tag>
    <description>
      <![CDATA[Modules::PerlMinimumVersion: Enforce backward compatible code.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitAutomaticExportation</key>
    <name>Prohibit Automatic Exportation</name>
    <configKey>Modules::ProhibitAutomaticExportation</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::ProhibitAutomaticExportation: Export symbols via `@EXPORT_OK' or `%EXPORT_TAGS' instead of `@EXPORT'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitConditionalUseStatements</key>
    <name>Prohibit Conditional Use Statements</name>
    <configKey>Modules::ProhibitConditionalUseStatements</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::ProhibitConditionalUseStatements: Avoid putting conditional logic around compile-time includes.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitEvilModules</key>
    <name>Prohibit Evil Modules</name>
    <configKey>Modules::ProhibitEvilModules</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::ProhibitEvilModules: Ban modules that aren't blessed by your shop.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitExcessMainComplexity</key>
    <name>Prohibit Excess Main Complexity</name>
    <configKey>Modules::ProhibitExcessMainComplexity</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Modules::ProhibitExcessMainComplexity: Minimize complexity in code that is outside of subroutines.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitModuleShebang</key>
    <name>Prohibit Module Shebang</name>
    <configKey>Modules::ProhibitModuleShebang</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Modules::ProhibitModuleShebang: don't put a #! line at the start of a module file]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitMultiplePackages</key>
    <name>Prohibit Multiple Packages</name>
    <configKey>Modules::ProhibitMultiplePackages</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::ProhibitMultiplePackages: Put packages (especially subclasses) in separate files.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitPOSIXimport</key>
    <name>Prohibit POSIXimport</name>
    <configKey>Modules::ProhibitPOSIXimport</configKey>
    <type>CODE_SMELL</type>
    <tag>efficiency</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Modules::ProhibitPOSIXimport: don't import the whole of POSIX into a module]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Modules::ProhibitUseQuotedVersion</key>
    <name>Prohibit Use Quoted Version</name>
    <configKey>Modules::ProhibitUseQuotedVersion</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[Modules::ProhibitUseQuotedVersion: avoid quoted version number string in a "use" statement]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Modules::RequireBarewordIncludes</key>
    <name>Require Bareword Includes</name>
    <configKey>Modules::RequireBarewordIncludes</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>portability</tag>
    <description>
      <![CDATA[Modules::RequireBarewordIncludes: Write `require Module' instead of `require 'Module.pm''.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Modules::RequireEndWithOne</key>
    <name>Require End With One</name>
    <configKey>Modules::RequireEndWithOne</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Modules::RequireEndWithOne: End each module with an explicitly `1;' instead of some funky expression.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Modules::RequireExplicitInclusion</key>
    <name>Require Explicit Inclusion</name>
    <configKey>Modules::RequireExplicitInclusion</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>strictersubs</tag>
    <description>
      <![CDATA[Modules::RequireExplicitInclusion: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Modules::RequireExplicitPackage</key>
    <name>Require Explicit Package</name>
    <configKey>Modules::RequireExplicitPackage</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::RequireExplicitPackage: Always make the `package' explicit.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Modules::RequireFilenameMatchesPackage</key>
    <name>Require Filename Matches Package</name>
    <configKey>Modules::RequireFilenameMatchesPackage</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Modules::RequireFilenameMatchesPackage: Package declaration must match filename.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Modules::RequireNoMatchVarsWithUseEnglish</key>
    <name>Require No Match Vars With Use English</name>
    <configKey>Modules::RequireNoMatchVarsWithUseEnglish</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[Modules::RequireNoMatchVarsWithUseEnglish: `use English' must be passed a `-no_match_vars' argument.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Modules::RequirePerlVersion</key>
    <name>Require Perl Version</name>
    <configKey>Modules::RequirePerlVersion</configKey>
    <type>CODE_SMELL</type>
    <tag>compatibility</tag>
    <tag>more</tag>
    <description>
      <![CDATA[Modules::RequirePerlVersion: Require a `use 5.006;' or similar.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Modules::RequireVersionVar</key>
    <name>Require Version Var</name>
    <configKey>Modules::RequireVersionVar</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>readability</tag>
    <description>
      <![CDATA[Modules::RequireVersionVar: Give every module a `$VERSION' number.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Moo::ProhibitMakeImmutable</key>
    <name>Prohibit Make Immutable</name>
    <configKey>Moo::ProhibitMakeImmutable</configKey>
    <type>CODE_SMELL</type>
    <tag>performance</tag>
    <description>
      <![CDATA[Moo::ProhibitMakeImmutable: Makes sure that Moo classes do not contain calls to make_immutable. (DEPRECATED)]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Moose::ProhibitDESTROYMethod</key>
    <name>Prohibit DESTROYMethod</name>
    <configKey>Moose::ProhibitDESTROYMethod</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>moose</tag>
    <description>
      <![CDATA[Moose::ProhibitDESTROYMethod: Use DEMOLISH instead of DESTROY]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Moose::ProhibitLazyBuild</key>
    <name>Prohibit Lazy Build</name>
    <configKey>Moose::ProhibitLazyBuild</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>moose</tag>
    <description>
      <![CDATA[Moose::ProhibitLazyBuild: Avoid lazy_build]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Moose::ProhibitMultipleWiths</key>
    <name>Prohibit Multiple Withs</name>
    <configKey>Moose::ProhibitMultipleWiths</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>moose</tag>
    <tag>roles</tag>
    <description>
      <![CDATA[Moose::ProhibitMultipleWiths: Require role composition]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Moose::ProhibitNewMethod</key>
    <name>Prohibit New Method</name>
    <configKey>Moose::ProhibitNewMethod</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>moose</tag>
    <description>
      <![CDATA[Moose::ProhibitNewMethod: Don't override Moose's standard constructors.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Moose::RequireCleanNamespace</key>
    <name>Require Clean Namespace</name>
    <configKey>Moose::RequireCleanNamespace</configKey>
    <type>CODE_SMELL</type>
    <tag>maintenance</tag>
    <tag>moose</tag>
    <description>
      <![CDATA[Moose::RequireCleanNamespace: Require removing implementation details from you packages.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Moose::RequireMakeImmutable</key>
    <name>Require Make Immutable</name>
    <configKey>Moose::RequireMakeImmutable</configKey>
    <type>CODE_SMELL</type>
    <tag>moose</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[Moose::RequireMakeImmutable: Ensure that you've made your Moose code fast]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>NamingConventions::Capitalization</key>
    <name>Capitalization</name>
    <configKey>NamingConventions::Capitalization</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[NamingConventions::Capitalization: Distinguish different program components by case.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>NamingConventions::ProhibitAmbiguousNames</key>
    <name>Prohibit Ambiguous Names</name>
    <configKey>NamingConventions::ProhibitAmbiguousNames</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[NamingConventions::ProhibitAmbiguousNames: Don't use vague variable or subroutine names like 'last' or 'record'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>NamingConventions::ProhibitMixedCaseSubs</key>
    <name>Prohibit Mixed Case Subs</name>
    <configKey>NamingConventions::ProhibitMixedCaseSubs</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>deprecated</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[NamingConventions::ProhibitMixedCaseSubs: Write `sub my_function{}' instead of `sub MyFunction{}'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>NamingConventions::ProhibitMixedCaseVars</key>
    <name>Prohibit Mixed Case Vars</name>
    <configKey>NamingConventions::ProhibitMixedCaseVars</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>deprecated</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[NamingConventions::ProhibitMixedCaseVars: Write `$my_variable = 42' instead of `$MyVariable = 42'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitDumper</key>
    <name>Prohibit Dumper</name>
    <configKey>OTRS::ProhibitDumper</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitDumper: Check module for use of "Dumper"]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitFetchrowHashref</key>
    <name>Prohibit Fetchrow Hashref</name>
    <configKey>OTRS::ProhibitFetchrowHashref</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitFetchrowHashref: Do no use FetchrowHashref]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitLocaltime</key>
    <name>Prohibit Localtime</name>
    <configKey>OTRS::ProhibitLocaltime</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitLocaltime: do not use "localtime"]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitLowPrecedenceOps</key>
    <name>Prohibit Low Precedence Ops</name>
    <configKey>OTRS::ProhibitLowPrecedenceOps</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitLowPrecedenceOps: Do not use "not", "and" and other low precedence operators]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitOpen</key>
    <name>Prohibit Open</name>
    <configKey>OTRS::ProhibitOpen</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitOpen: Do not use "open"]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitPushISA</key>
    <name>Prohibit Push ISA</name>
    <configKey>OTRS::ProhibitPushISA</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <description>
      <![CDATA[OTRS::ProhibitPushISA: Do not use "push @ISA, ..."]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitRequire</key>
    <name>Prohibit Require</name>
    <configKey>OTRS::ProhibitRequire</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitRequire: Do not use "require"]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitRmtree</key>
    <name>Prohibit Rmtree</name>
    <configKey>OTRS::ProhibitRmtree</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitRmtree: Do not use File::Path's rmtree]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::ProhibitSomeCoreFunctions</key>
    <name>Prohibit Some Core Functions</name>
    <configKey>OTRS::ProhibitSomeCoreFunctions</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::ProhibitSomeCoreFunctions: Some core functions should not be used]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::RequireCamelCase</key>
    <name>Require Camel Case</name>
    <configKey>OTRS::RequireCamelCase</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::RequireCamelCase: Variable, subroutine, and package names have to be in CamelCase]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::RequireParensWithMethods</key>
    <name>Require Parens With Methods</name>
    <configKey>OTRS::RequireParensWithMethods</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::RequireParensWithMethods: Use parens when a method is called]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>OTRS::RequireTrueReturnValueForModules</key>
    <name>Require True Return Value For Modules</name>
    <configKey>OTRS::RequireTrueReturnValueForModules</configKey>
    <type>CODE_SMELL</type>
    <tag>otrs</tag>
    <tag>otrslt33</tag>
    <description>
      <![CDATA[OTRS::RequireTrueReturnValueForModules: Check if modules have a "true" return value]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Objects::ProhibitIndirectSyntax</key>
    <name>Prohibit Indirect Syntax</name>
    <configKey>Objects::ProhibitIndirectSyntax</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Objects::ProhibitIndirectSyntax: Prohibit indirect object call syntax.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Operators::ProhibitSmartmatch</key>
    <name>Prohibit Smartmatch</name>
    <configKey>Operators::ProhibitSmartmatch</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <description>
      <![CDATA[Operators::ProhibitSmartmatch: avoid using explicit smartmatching via `~~' operator]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Perlsecret</key>
    <name>Perlsecret</name>
    <configKey>Perlsecret</configKey>
    <type>CODE_SMELL</type>
    <tag>perlsecret</tag>
    <description>
      <![CDATA[Perlsecret: Prevent perlsecrets entering your codebase NAME Perl::Critic::Policy::Perlsecret - Prevent perlsecrets entering your codebase]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>ProhibitSmartmatch</key>
    <name>Prohibit Smartmatch</name>
    <configKey>ProhibitSmartmatch</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <description>
      <![CDATA[ProhibitSmartmatch: avoid using both explicit and implicit smartmatching]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>References::ProhibitDoubleSigils</key>
    <name>Prohibit Double Sigils</name>
    <configKey>References::ProhibitDoubleSigils</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[References::ProhibitDoubleSigils: Write `@{ $array_ref }' instead of `@$array_ref'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitCaptureWithoutTest</key>
    <name>Prohibit Capture Without Test</name>
    <configKey>RegularExpressions::ProhibitCaptureWithoutTest</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitCaptureWithoutTest: Capture variable used outside conditional.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitComplexRegexes</key>
    <name>Prohibit Complex Regexes</name>
    <configKey>RegularExpressions::ProhibitComplexRegexes</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitComplexRegexes: Split long regexps into smaller `qr//' chunks.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitEnumeratedClasses</key>
    <name>Prohibit Enumerated Classes</name>
    <configKey>RegularExpressions::ProhibitEnumeratedClasses</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <tag>unicode</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitEnumeratedClasses: Use named character classes instead of explicit character lists.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitEscapedMetacharacters</key>
    <name>Prohibit Escaped Metacharacters</name>
    <configKey>RegularExpressions::ProhibitEscapedMetacharacters</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitEscapedMetacharacters: Use character classes for literal meta-characters instead of escapes.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitFixedStringMatches</key>
    <name>Prohibit Fixed String Matches</name>
    <configKey>RegularExpressions::ProhibitFixedStringMatches</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitFixedStringMatches: Use `eq' or hash instead of fixed-pattern regexps.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitSingleCharAlternation</key>
    <name>Prohibit Single Char Alternation</name>
    <configKey>RegularExpressions::ProhibitSingleCharAlternation</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitSingleCharAlternation: Use `[abc]' instead of `a|b|c'.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitUnusedCapture</key>
    <name>Prohibit Unused Capture</name>
    <configKey>RegularExpressions::ProhibitUnusedCapture</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitUnusedCapture: Only use a capturing group if you plan to use the captured value.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitUnusualDelimiters</key>
    <name>Prohibit Unusual Delimiters</name>
    <configKey>RegularExpressions::ProhibitUnusualDelimiters</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitUnusualDelimiters: Use only `//' or `{}' to delimit regexps.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>RegularExpressions::ProhibitUselessTopic</key>
    <name>Prohibit Useless Topic</name>
    <configKey>RegularExpressions::ProhibitUselessTopic</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <description>
      <![CDATA[RegularExpressions::ProhibitUselessTopic: Don't use $_ to match against regexes.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::RequireBracesForMultiline</key>
    <name>Require Braces For Multiline</name>
    <configKey>RegularExpressions::RequireBracesForMultiline</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::RequireBracesForMultiline: Use `{' and `}' to delimit multi-line regexps.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>RegularExpressions::RequireDotMatchAnything</key>
    <name>Require Dot Match Anything</name>
    <configKey>RegularExpressions::RequireDotMatchAnything</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::RequireDotMatchAnything: Always use the `/s' modifier with regular expressions.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::RequireExtendedFormatting</key>
    <name>Require Extended Formatting</name>
    <configKey>RegularExpressions::RequireExtendedFormatting</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::RequireExtendedFormatting: Always use the `/x' modifier with regular expressions.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::RequireExtendedFormattingExceptForSplit</key>
    <name>Require Extended Formatting Except For Split</name>
    <configKey>RegularExpressions::RequireExtendedFormattingExceptForSplit</configKey>
    <type>CODE_SMELL</type>
    <tag>reneeb</tag>
    <description>
      <![CDATA[RegularExpressions::RequireExtendedFormattingExceptForSplit: Always use the `/x' modifier with regular expressions, except when the regex is used]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>RegularExpressions::RequireLineBoundaryMatching</key>
    <name>Require Line Boundary Matching</name>
    <configKey>RegularExpressions::RequireLineBoundaryMatching</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[RegularExpressions::RequireLineBoundaryMatching: Always use the `/m' modifier with regular expressions.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Reneeb::Capitalization</key>
    <name>Capitalization</name>
    <configKey>Reneeb::Capitalization</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Reneeb::Capitalization: NamingConventions::Capitalization plus the ability to exempt "Full qualified package names"]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>Reneeb::ProhibitBlockEval</key>
    <name>Prohibit Block Eval</name>
    <configKey>Reneeb::ProhibitBlockEval</configKey>
    <type>CODE_SMELL</type>
    <tag>reneeb</tag>
    <description>
      <![CDATA[Reneeb::ProhibitBlockEval: Do not use the Block-eval. Use Try::Tiny instead]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Storable::ProhibitStoreOrFreeze</key>
    <name>Prohibit Store Or Freeze</name>
    <configKey>Storable::ProhibitStoreOrFreeze</configKey>
    <type>CODE_SMELL</type>
    <tag>storable</tag>
    <description>
      <![CDATA[Storable::ProhibitStoreOrFreeze: do not use store or freeze in Storable.pm]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitAmpersandSigils</key>
    <name>Prohibit Ampersand Sigils</name>
    <configKey>Subroutines::ProhibitAmpersandSigils</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::ProhibitAmpersandSigils: Don't call functions with a leading ampersand sigil.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitBuiltinHomonyms</key>
    <name>Prohibit Builtin Homonyms</name>
    <configKey>Subroutines::ProhibitBuiltinHomonyms</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::ProhibitBuiltinHomonyms: Don't declare your own `open' function.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitCallsToUndeclaredSubs</key>
    <name>Prohibit Calls To Undeclared Subs</name>
    <configKey>Subroutines::ProhibitCallsToUndeclaredSubs</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>strictersubs</tag>
    <description>
      <![CDATA[Subroutines::ProhibitCallsToUndeclaredSubs: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitCallsToUnexportedSubs</key>
    <name>Prohibit Calls To Unexported Subs</name>
    <configKey>Subroutines::ProhibitCallsToUnexportedSubs</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>strictersubs</tag>
    <description>
      <![CDATA[Subroutines::ProhibitCallsToUnexportedSubs: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitExcessComplexity</key>
    <name>Prohibit Excess Complexity</name>
    <configKey>Subroutines::ProhibitExcessComplexity</configKey>
    <type>CODE_SMELL</type>
    <tag>complexity</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Subroutines::ProhibitExcessComplexity: Minimize complexity by factoring code into smaller subroutines.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitExplicitReturnUndef</key>
    <name>Prohibit Explicit Return Undef</name>
    <configKey>Subroutines::ProhibitExplicitReturnUndef</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::ProhibitExplicitReturnUndef: Return failure with bare `return' instead of `return undef'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitExportingUndeclaredSubs</key>
    <name>Prohibit Exporting Undeclared Subs</name>
    <configKey>Subroutines::ProhibitExportingUndeclaredSubs</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>strictersubs</tag>
    <description>
      <![CDATA[Subroutines::ProhibitExportingUndeclaredSubs: ]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitManyArgs</key>
    <name>Prohibit Many Args</name>
    <configKey>Subroutines::ProhibitManyArgs</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::ProhibitManyArgs: Too many arguments.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitNestedSubs</key>
    <name>Prohibit Nested Subs</name>
    <configKey>Subroutines::ProhibitNestedSubs</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Subroutines::ProhibitNestedSubs: `sub never { sub correct {} }'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitQualifiedSubDeclarations</key>
    <name>Prohibit Qualified Sub Declarations</name>
    <configKey>Subroutines::ProhibitQualifiedSubDeclarations</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>strictersubs</tag>
    <description>
      <![CDATA[Subroutines::ProhibitQualifiedSubDeclarations: ]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitReturnSort</key>
    <name>Prohibit Return Sort</name>
    <configKey>Subroutines::ProhibitReturnSort</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Subroutines::ProhibitReturnSort: Behavior of `sort' is not defined if called in scalar context.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitSubroutinePrototypes</key>
    <name>Prohibit Subroutine Prototypes</name>
    <configKey>Subroutines::ProhibitSubroutinePrototypes</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::ProhibitSubroutinePrototypes: Don't write `sub my_function (@@) {}'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Subroutines::ProhibitUnusedPrivateSubroutines</key>
    <name>Prohibit Unused Private Subroutines</name>
    <configKey>Subroutines::ProhibitUnusedPrivateSubroutines</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Subroutines::ProhibitUnusedPrivateSubroutines: Prevent unused private subroutines.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::ProtectPrivateSubs</key>
    <name>Protect Private Subs</name>
    <configKey>Subroutines::ProtectPrivateSubs</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Subroutines::ProtectPrivateSubs: Prevent access to private subs in other packages.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Subroutines::RequireArgUnpacking</key>
    <name>Require Arg Unpacking</name>
    <configKey>Subroutines::RequireArgUnpacking</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::RequireArgUnpacking: Always unpack `@_' first.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Subroutines::RequireFinalReturn</key>
    <name>Require Final Return</name>
    <configKey>Subroutines::RequireFinalReturn</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Subroutines::RequireFinalReturn: End every path through a subroutine with an explicit `return' statement.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::ProhibitNoStrict</key>
    <name>Prohibit No Strict</name>
    <configKey>TestingAndDebugging::ProhibitNoStrict</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[TestingAndDebugging::ProhibitNoStrict: Prohibit various flavors of `no strict'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::ProhibitNoWarnings</key>
    <name>Prohibit No Warnings</name>
    <configKey>TestingAndDebugging::ProhibitNoWarnings</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[TestingAndDebugging::ProhibitNoWarnings: Prohibit various flavors of `no warnings'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::ProhibitProlongedStrictureOverride</key>
    <name>Prohibit Prolonged Stricture Override</name>
    <configKey>TestingAndDebugging::ProhibitProlongedStrictureOverride</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[TestingAndDebugging::ProhibitProlongedStrictureOverride: Don't turn off strict for large blocks of code.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::RequireTestLabels</key>
    <name>Require Test Labels</name>
    <configKey>TestingAndDebugging::RequireTestLabels</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>tests</tag>
    <description>
      <![CDATA[TestingAndDebugging::RequireTestLabels: Tests should all have labels.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::RequireUseStrict</key>
    <name>Require Use Strict</name>
    <configKey>TestingAndDebugging::RequireUseStrict</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[TestingAndDebugging::RequireUseStrict: Always `use strict'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>TestingAndDebugging::RequireUseWarnings</key>
    <name>Require Use Warnings</name>
    <configKey>TestingAndDebugging::RequireUseWarnings</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[TestingAndDebugging::RequireUseWarnings: Always `use warnings'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Tics::ProhibitLongLines</key>
    <name>Prohibit Long Lines</name>
    <configKey>Tics::ProhibitLongLines</configKey>
    <type>CODE_SMELL</type>
    <tag>tics</tag>
    <description>
      <![CDATA[Tics::ProhibitLongLines: 80 x 40 for life!]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Tics::ProhibitManyArrows</key>
    <name>Prohibit Many Arrows</name>
    <configKey>Tics::ProhibitManyArrows</configKey>
    <type>CODE_SMELL</type>
    <tag>tics</tag>
    <description>
      <![CDATA[Tics::ProhibitManyArrows: (this => is => not => good)]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Tics::ProhibitUseBase</key>
    <name>Prohibit Use Base</name>
    <configKey>Tics::ProhibitUseBase</configKey>
    <type>CODE_SMELL</type>
    <tag>tics</tag>
    <description>
      <![CDATA[Tics::ProhibitUseBase: do not use base.pm]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>TryTiny::ProhibitExitingSubroutine</key>
    <name>Prohibit Exiting Subroutine</name>
    <configKey>TryTiny::ProhibitExitingSubroutine</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <description>
      <![CDATA[TryTiny::ProhibitExitingSubroutine: Ban next/last/return in Try::Tiny blocks]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>TryTiny::RequireCatch</key>
    <name>Require Catch</name>
    <configKey>TryTiny::RequireCatch</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <description>
      <![CDATA[TryTiny::RequireCatch: Always include a "catch" block when using "try"]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>TryTiny::RequireUse</key>
    <name>Require Use</name>
    <configKey>TryTiny::RequireUse</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <description>
      <![CDATA[TryTiny::RequireUse: Requires that code which utilizes Try::Tiny actually use()es it.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ConstantBeforeLt</key>
    <name>Constant Before Lt</name>
    <configKey>ValuesAndExpressions::ConstantBeforeLt</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ConstantBeforeLt: disallow bareword before <]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::NotWithCompare</key>
    <name>Not With Compare</name>
    <configKey>ValuesAndExpressions::NotWithCompare</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::NotWithCompare: logical not used with compare]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitAccessOfPrivateData</key>
    <name>Prohibit Access Of Private Data</name>
    <configKey>ValuesAndExpressions::ProhibitAccessOfPrivateData</configKey>
    <type>CODE_SMELL</type>
    <tag>maintenance</tag>
    <tag>nits</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitAccessOfPrivateData: ]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitArrayAssignAref</key>
    <name>Prohibit Array Assign Aref</name>
    <configKey>ValuesAndExpressions::ProhibitArrayAssignAref</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitArrayAssignAref: don't assign an anonymous arrayref to an array]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitBarewordDoubleColon</key>
    <name>Prohibit Bareword Double Colon</name>
    <configKey>ValuesAndExpressions::ProhibitBarewordDoubleColon</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitBarewordDoubleColon: don't use Foo:: style barewords]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitCommaSeparatedStatements</key>
    <name>Prohibit Comma Separated Statements</name>
    <configKey>ValuesAndExpressions::ProhibitCommaSeparatedStatements</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitCommaSeparatedStatements: Don't use the comma operator as a statement separator.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitComplexVersion</key>
    <name>Prohibit Complex Version</name>
    <configKey>ValuesAndExpressions::ProhibitComplexVersion</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitComplexVersion: Prohibit version values from outside the module.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitConstantPragma</key>
    <name>Prohibit Constant Pragma</name>
    <configKey>ValuesAndExpressions::ProhibitConstantPragma</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitConstantPragma: Don't `use constant FOO => 15'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitDuplicateHashKeys</key>
    <name>Prohibit Duplicate Hash Keys</name>
    <configKey>ValuesAndExpressions::ProhibitDuplicateHashKeys</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitDuplicateHashKeys: disallow duplicate literal hash keys]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitEmptyCommas</key>
    <name>Prohibit Empty Commas</name>
    <configKey>ValuesAndExpressions::ProhibitEmptyCommas</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitEmptyCommas: disallow empty consecutive commas]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitEmptyQuotes</key>
    <name>Prohibit Empty Quotes</name>
    <configKey>ValuesAndExpressions::ProhibitEmptyQuotes</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitEmptyQuotes: Write `q{}' instead of `'''.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitEscapedCharacters</key>
    <name>Prohibit Escaped Characters</name>
    <configKey>ValuesAndExpressions::ProhibitEscapedCharacters</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitEscapedCharacters: Write `"\N{DELETE}"' instead of `"\x7F"', etc.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitFiletest_f</key>
    <name>Prohibit Filetest_f</name>
    <configKey>ValuesAndExpressions::ProhibitFiletest_f</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitFiletest_f: don't use the -f file test]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitImplicitNewlines</key>
    <name>Prohibit Implicit Newlines</name>
    <configKey>ValuesAndExpressions::ProhibitImplicitNewlines</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitImplicitNewlines: Use concatenation or HEREDOCs instead of literal line breaks in strings.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitInterpolationOfLiterals</key>
    <name>Prohibit Interpolation Of Literals</name>
    <configKey>ValuesAndExpressions::ProhibitInterpolationOfLiterals</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitInterpolationOfLiterals: Always use single quotes for literal strings.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitLeadingZeros</key>
    <name>Prohibit Leading Zeros</name>
    <configKey>ValuesAndExpressions::ProhibitLeadingZeros</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitLeadingZeros: Write `oct(755)' instead of `0755'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitLongChainsOfMethodCalls</key>
    <name>Prohibit Long Chains Of Method Calls</name>
    <configKey>ValuesAndExpressions::ProhibitLongChainsOfMethodCalls</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitLongChainsOfMethodCalls: Long chains of method calls indicate tightly coupled code.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitMagicNumbers</key>
    <name>Prohibit Magic Numbers</name>
    <configKey>ValuesAndExpressions::ProhibitMagicNumbers</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitMagicNumbers: Don't use values that don't explain themselves.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitMismatchedOperators</key>
    <name>Prohibit Mismatched Operators</name>
    <configKey>ValuesAndExpressions::ProhibitMismatchedOperators</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrule</tag>
    <tag>core</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitMismatchedOperators: Don't mix numeric operators with string operands, or vice-versa.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitMixedBooleanOperators</key>
    <name>Prohibit Mixed Boolean Operators</name>
    <configKey>ValuesAndExpressions::ProhibitMixedBooleanOperators</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitMixedBooleanOperators: Write ` !$foo && $bar || $baz ' instead of ` not $foo && $bar or $baz'.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitNoisyQuotes</key>
    <name>Prohibit Noisy Quotes</name>
    <configKey>ValuesAndExpressions::ProhibitNoisyQuotes</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitNoisyQuotes: Use `q{}' or `qq{}' instead of quotes for awkward-looking strings.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitNullStatements</key>
    <name>Prohibit Null Statements</name>
    <configKey>ValuesAndExpressions::ProhibitNullStatements</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitNullStatements: disallow empty statements (stray semicolons)]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters</key>
    <name>Prohibit Quotes As Quotelike Operator Delimiters</name>
    <configKey>ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitQuotesAsQuotelikeOperatorDelimiters: Don't use quotes (`'', `"', ``') as delimiters for the quote-like operators.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator</key>
    <name>Prohibit Special Literal Heredoc Terminator</name>
    <configKey>ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitSpecialLiteralHeredocTerminator: Don't write ` print <<'__END__' '.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitUnknownBackslash</key>
    <name>Prohibit Unknown Backslash</name>
    <configKey>ValuesAndExpressions::ProhibitUnknownBackslash</configKey>
    <type>CODE_SMELL</type>
    <tag>cosmetic</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitUnknownBackslash: don't use undefined backslash forms]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::ProhibitVersionStrings</key>
    <name>Prohibit Version Strings</name>
    <configKey>ValuesAndExpressions::ProhibitVersionStrings</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::ProhibitVersionStrings: Don't use strings like `v1.4' or `1.4.5' when including other modules.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireConstantOnLeftSideOfEquality</key>
    <name>Require Constant On Left Side Of Equality</name>
    <configKey>ValuesAndExpressions::RequireConstantOnLeftSideOfEquality</configKey>
    <type>CODE_SMELL</type>
    <tag>more</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireConstantOnLeftSideOfEquality: Putting the constant value on the left side of an equality exposes typos.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireConstantVersion</key>
    <name>Require Constant Version</name>
    <configKey>ValuesAndExpressions::RequireConstantVersion</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireConstantVersion: Require $VERSION to be a constant rather than a computed value.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireInterpolationOfMetachars</key>
    <name>Require Interpolation Of Metachars</name>
    <configKey>ValuesAndExpressions::RequireInterpolationOfMetachars</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireInterpolationOfMetachars: Warns that you might have used single quotes when you really wanted double-quotes.]]>
    </description>
    <priority>INFO</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireNumberSeparators</key>
    <name>Require Number Separators</name>
    <configKey>ValuesAndExpressions::RequireNumberSeparators</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireNumberSeparators: Write ` 141_234_397.0145 ' instead of ` 141234397.0145 '.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireNumericVersion</key>
    <name>Require Numeric Version</name>
    <configKey>ValuesAndExpressions::RequireNumericVersion</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireNumericVersion: $VERSION a plain number]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireQuotedHeredocTerminator</key>
    <name>Require Quoted Heredoc Terminator</name>
    <configKey>ValuesAndExpressions::RequireQuotedHeredocTerminator</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireQuotedHeredocTerminator: Write ` print <<'THE_END' ' or ` print <<"THE_END" '.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RequireUpperCaseHeredocTerminator</key>
    <name>Require Upper Case Heredoc Terminator</name>
    <configKey>ValuesAndExpressions::RequireUpperCaseHeredocTerminator</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RequireUpperCaseHeredocTerminator: Write ` <<'THE_END'; ' instead of ` <<'theEnd'; '.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::RestrictLongStrings</key>
    <name>Restrict Long Strings</name>
    <configKey>ValuesAndExpressions::RestrictLongStrings</configKey>
    <type>CODE_SMELL</type>
    <tag>more</tag>
    <tag>readability</tag>
    <description>
      <![CDATA[ValuesAndExpressions::RestrictLongStrings: Stop mixing long strings with code.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>ValuesAndExpressions::UnexpandedSpecialLiteral</key>
    <name>Unexpanded Special Literal</name>
    <configKey>ValuesAndExpressions::UnexpandedSpecialLiteral</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>pulp</tag>
    <description>
      <![CDATA[ValuesAndExpressions::UnexpandedSpecialLiteral: specials like __PACKAGE__ used literally]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::NameReuse</key>
    <name>Name Reuse</name>
    <configKey>Variables::NameReuse</configKey>
    <type>CODE_SMELL</type>

    <description>
      <![CDATA[Variables::NameReuse: Don't reuse names for different types of variables]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitAugmentedAssignmentInDeclaration</key>
    <name>Prohibit Augmented Assignment In Declaration</name>
    <configKey>Variables::ProhibitAugmentedAssignmentInDeclaration</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Variables::ProhibitAugmentedAssignmentInDeclaration: Do not write ` my $foo .= 'bar'; '.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitConditionalDeclarations</key>
    <name>Prohibit Conditional Declarations</name>
    <configKey>Variables::ProhibitConditionalDeclarations</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Variables::ProhibitConditionalDeclarations: Do not write ` my $foo = $bar if $baz; '.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitFatCommaInDeclaration</key>
    <name>Prohibit Fat Comma In Declaration</name>
    <configKey>Variables::ProhibitFatCommaInDeclaration</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Variables::ProhibitFatCommaInDeclaration: Prohibit fat comma in declaration]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitLocalVars</key>
    <name>Prohibit Local Vars</name>
    <configKey>Variables::ProhibitLocalVars</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::ProhibitLocalVars: Use `my' instead of `local', except when you have to.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitLoopOnHash</key>
    <name>Prohibit Loop On Hash</name>
    <configKey>Variables::ProhibitLoopOnHash</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <description>
      <![CDATA[Variables::ProhibitLoopOnHash: Don't write loops on hashes, only on keys and values of hashes]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitMatchVars</key>
    <name>Prohibit Match Vars</name>
    <configKey>Variables::ProhibitMatchVars</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>pbp</tag>
    <tag>performance</tag>
    <description>
      <![CDATA[Variables::ProhibitMatchVars: Avoid `$`', `$&', `$'' and their English equivalents.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitPackageVars</key>
    <name>Prohibit Package Vars</name>
    <configKey>Variables::ProhibitPackageVars</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::ProhibitPackageVars: Eliminate globals declared with `our' or `use vars'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitPerl4PackageNames</key>
    <name>Prohibit Perl4Package Names</name>
    <configKey>Variables::ProhibitPerl4PackageNames</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Variables::ProhibitPerl4PackageNames: Use double colon (::) to separate package name components instead of single quotes (').]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitPunctuationVars</key>
    <name>Prohibit Punctuation Vars</name>
    <configKey>Variables::ProhibitPunctuationVars</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>cosmetic</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::ProhibitPunctuationVars: Write `$EVAL_ERROR' instead of `$@'.]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitReusedNames</key>
    <name>Prohibit Reused Names</name>
    <configKey>Variables::ProhibitReusedNames</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>core</tag>
    <description>
      <![CDATA[Variables::ProhibitReusedNames: Do not reuse a variable name in a lexical scope]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitUnusedVariables</key>
    <name>Prohibit Unused Variables</name>
    <configKey>Variables::ProhibitUnusedVariables</configKey>
    <type>CODE_SMELL</type>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Variables::ProhibitUnusedVariables: Don't ask for storage you don't need.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::ProhibitUselessInitialization</key>
    <name>Prohibit Useless Initialization</name>
    <configKey>Variables::ProhibitUselessInitialization</configKey>
    <type>CODE_SMELL</type>
    <tag>jtrammell</tag>
    <tag>petpeeves</tag>
    <description>
      <![CDATA[Variables::ProhibitUselessInitialization: prohibit superfluous initializations]]>
    </description>
    <priority>MINOR</priority>
  </rule>

  <rule>
    <key>Variables::ProtectPrivateVars</key>
    <name>Protect Private Vars</name>
    <configKey>Variables::ProtectPrivateVars</configKey>
    <type>VULNERABILITY</type>
    <tag>certrule</tag>
    <tag>core</tag>
    <tag>maintenance</tag>
    <description>
      <![CDATA[Variables::ProtectPrivateVars: Prevent access to private vars in other packages.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::RequireInitializationForLocalVars</key>
    <name>Require Initialization For Local Vars</name>
    <configKey>Variables::RequireInitializationForLocalVars</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::RequireInitializationForLocalVars: Write `local $foo = $bar;' instead of just `local $foo;'.]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>Variables::RequireLexicalLoopIterators</key>
    <name>Require Lexical Loop Iterators</name>
    <configKey>Variables::RequireLexicalLoopIterators</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::RequireLexicalLoopIterators: Write `for my $element (@list) {...}' instead of `for $element (@list) {...}'.]]>
    </description>
    <priority>BLOCKER</priority>
  </rule>

  <rule>
    <key>Variables::RequireLocalizedPunctuationVars</key>
    <name>Require Localized Punctuation Vars</name>
    <configKey>Variables::RequireLocalizedPunctuationVars</configKey>
    <type>BUG</type>
    <tag>bugs</tag>
    <tag>certrec</tag>
    <tag>core</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::RequireLocalizedPunctuationVars: Magic variables should be assigned as "local".]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>Variables::RequireNegativeIndices</key>
    <name>Require Negative Indices</name>
    <configKey>Variables::RequireNegativeIndices</configKey>
    <type>CODE_SMELL</type>
    <tag>core</tag>
    <tag>maintenance</tag>
    <tag>pbp</tag>
    <description>
      <![CDATA[Variables::RequireNegativeIndices: Negative array index should be used.]]>
    </description>
    <priority>CRITICAL</priority>
  </rule>

  <rule>
    <key>logicLAB::ModuleBlacklist</key>
    <name>Module Blacklist</name>
    <configKey>logicLAB::ModuleBlacklist</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::ModuleBlacklist: blacklist modules you want to prohibit use of]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::ProhibitShellDispatch</key>
    <name>Prohibit Shell Dispatch</name>
    <configKey>logicLAB::ProhibitShellDispatch</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::ProhibitShellDispatch: simple policy prohibiting shell dispatching]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::ProhibitUseLib</key>
    <name>Prohibit Use Lib</name>
    <configKey>logicLAB::ProhibitUseLib</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::ProhibitUseLib: simple policy prohibiting the use of 'use lib']]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::RequirePackageNamePattern</key>
    <name>Require Package Name Pattern</name>
    <configKey>logicLAB::RequirePackageNamePattern</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::RequirePackageNamePattern: simple policy for enforcing a package naming policy]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::RequireParamsValidate</key>
    <name>Require Params Validate</name>
    <configKey>logicLAB::RequireParamsValidate</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::RequireParamsValidate: simple policy for enforcing use of Params::Validate]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::RequireSheBang</key>
    <name>Require She Bang</name>
    <configKey>logicLAB::RequireSheBang</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::RequireSheBang: simple policy for keeping your shebang line uniform]]>
    </description>
    <priority>MAJOR</priority>
  </rule>

  <rule>
    <key>logicLAB::RequireVersionFormat</key>
    <name>Require Version Format</name>
    <configKey>logicLAB::RequireVersionFormat</configKey>
    <type>CODE_SMELL</type>
    <tag>logiclab</tag>
    <description>
      <![CDATA[logicLAB::RequireVersionFormat: assert version number formats]]>
    </description>
    <priority>MAJOR</priority>
  </rule>
</rules>
